<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on VSVnakers 主页</title>
    <link>https://vsvnakers.github.io/posts/</link>
    <description>Recent content in Posts on VSVnakers 主页</description>
    <generator>Hugo -- 0.147.7</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 01 Jun 2025 02:58:00 +0800</lastBuildDate>
    <atom:link href="https://vsvnakers.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>二维卷积实现</title>
      <link>https://vsvnakers.github.io/posts/2d-convolution/</link>
      <pubDate>Sun, 01 Jun 2025 02:58:00 +0800</pubDate>
      <guid>https://vsvnakers.github.io/posts/2d-convolution/</guid>
      <description>&lt;h1 id=&#34;二维卷积操作原理解析--c语言与python手写实现&#34;&gt;二维卷积操作：原理解析 + C语言与Python手写实现&lt;/h1&gt;
&lt;h2 id=&#34;一什么是二维卷积&#34;&gt;一、什么是二维卷积？&lt;/h2&gt;
&lt;p&gt;二维卷积（2D Convolution）是图像处理中最基础也最重要的操作之一，广泛应用于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;图像模糊&lt;/li&gt;
&lt;li&gt;边缘检测&lt;/li&gt;
&lt;li&gt;卷积神经网络（CNN）特征提取&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;通俗地讲：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;把一个小的“滤波器”（也叫“卷积核”）放在图像上一个位置，对应区域的值和卷积核每个位置相乘后加总，结果作为输出图像的一个像素值，然后不断滑动这个核，得到整张图的新图像。&lt;/p&gt;&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;二卷积的操作步骤滑动--乘加&#34;&gt;二、卷积的操作步骤（滑动 + 乘加）&lt;/h2&gt;
&lt;p&gt;假设你有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原始图像（5×5）&lt;/li&gt;
&lt;li&gt;卷积核（3×3）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;操作过程如下：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;卷积核放在图像左上角，和 3x3 区域重叠&lt;/li&gt;
&lt;li&gt;对应位置相乘，然后求和&lt;/li&gt;
&lt;li&gt;得到的结果就是输出图像对应位置的像素值&lt;/li&gt;
&lt;li&gt;卷积核向右移动一格，重复以上过程&lt;/li&gt;
&lt;li&gt;到右边边缘后，向下一行移动，从左往右继续滑动&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;示例计算&#34;&gt;示例计算：&lt;/h3&gt;
&lt;p&gt;图像窗口：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;1 2 3
4 5 6
7 8 9
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;卷积核：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;1  0 -1
1  0 -1
1  0 -1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;计算：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;= 1×1 + 2×0 + 3×(-1)
+ 4×1 + 5×0 + 6×(-1)
+ 7×1 + 8×0 + 9×(-1)
= 1 - 3 + 4 - 6 + 7 - 9 = -6
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;输出图像中对应位置的值就是 &lt;code&gt;-6&lt;/code&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>LRU 页面置换算法</title>
      <link>https://vsvnakers.github.io/posts/lru/</link>
      <pubDate>Sat, 26 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://vsvnakers.github.io/posts/lru/</guid>
      <description>&lt;hr&gt;
&lt;h1 id=&#34;-lru-页面置换算法&#34;&gt;🚀 LRU 页面置换算法&lt;/h1&gt;
&lt;p&gt;在操作系统内存管理中，除了 FIFO，另一种更聪明且常用的页面置换策略是 —— &lt;strong&gt;LRU 页面置换算法&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-一什么是-lru-页面置换算法&#34;&gt;📌 一、什么是 LRU 页面置换算法？&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;LRU（Least Recently Used，最近最少使用）页面置换算法&lt;/strong&gt;是这样一种策略：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;淘汰最近最久未被访问过的页面。&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;直白地说&lt;/strong&gt;：如果一个页面很久没用了，那么它以后可能也不怎么用，所以优先把它换出去。&lt;/p&gt;
&lt;h3 id=&#34;-特点&#34;&gt;✅ 特点：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;需要记录页面最近的访问历史&lt;/li&gt;
&lt;li&gt;淘汰“最久没用”的页面，而不是最早进入的&lt;/li&gt;
&lt;li&gt;通常使用&lt;strong&gt;栈（Stack）&lt;/strong&gt;、&lt;strong&gt;链表（List）&lt;/strong&gt; 或 **时间戳（Timestamp）**结构实现&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-二缺页中断机制简介同样适用-lru&#34;&gt;❗ 二、缺页中断机制简介（同样适用 LRU）&lt;/h2&gt;
&lt;p&gt;当访问一个不在内存中的页面时：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;触发缺页中断&lt;/li&gt;
&lt;li&gt;如果内存满了，选择最近最久未使用的页面进行置换&lt;/li&gt;
&lt;li&gt;加载新页面并恢复执行&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;💡 缺页次数依然是评估 LRU 表现的关键指标，通常 &lt;strong&gt;比 FIFO 更少的缺页次数&lt;/strong&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-三lru-算法示例分析&#34;&gt;🧪 三、LRU 算法示例分析&lt;/h2&gt;
&lt;p&gt;假设页面访问序列为：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[7, 0, 1, 2, 0, 3, 0, 4]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;帧数 3，使用 LRU 策略：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;步骤&lt;/th&gt;
          &lt;th&gt;页面访问&lt;/th&gt;
          &lt;th&gt;内存状态&lt;/th&gt;
          &lt;th&gt;缺页？&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;1&lt;/td&gt;
          &lt;td&gt;7&lt;/td&gt;
          &lt;td&gt;7&lt;/td&gt;
          &lt;td&gt;✅&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;2&lt;/td&gt;
          &lt;td&gt;0&lt;/td&gt;
          &lt;td&gt;7 0&lt;/td&gt;
          &lt;td&gt;✅&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;3&lt;/td&gt;
          &lt;td&gt;1&lt;/td&gt;
          &lt;td&gt;7 0 1&lt;/td&gt;
          &lt;td&gt;✅&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;4&lt;/td&gt;
          &lt;td&gt;2&lt;/td&gt;
          &lt;td&gt;0 1 2（7 最久未用，被换出）&lt;/td&gt;
          &lt;td&gt;✅&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;5&lt;/td&gt;
          &lt;td&gt;0&lt;/td&gt;
          &lt;td&gt;0 1 2（已存在）&lt;/td&gt;
          &lt;td&gt;❌&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;6&lt;/td&gt;
          &lt;td&gt;3&lt;/td&gt;
          &lt;td&gt;1 2 3（0 最久未用，被换出）&lt;/td&gt;
          &lt;td&gt;✅&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;7&lt;/td&gt;
          &lt;td&gt;0&lt;/td&gt;
          &lt;td&gt;2 3 0（1 最久未用，被换出）&lt;/td&gt;
          &lt;td&gt;✅&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;8&lt;/td&gt;
          &lt;td&gt;4&lt;/td&gt;
          &lt;td&gt;3 0 4（2 最久未用，被换出）&lt;/td&gt;
          &lt;td&gt;✅&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;缺页次数：6&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>FIFO 页面置换算法</title>
      <link>https://vsvnakers.github.io/posts/fifo/</link>
      <pubDate>Thu, 24 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://vsvnakers.github.io/posts/fifo/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;学习 FIFO 的总结&lt;/p&gt;&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&#34;-理解-fifo-页面置换算法&#34;&gt;🧠 理解 FIFO 页面置换算法&lt;/h1&gt;
&lt;p&gt;在操作系统的内存管理中，&lt;strong&gt;页面置换算法&lt;/strong&gt;起着至关重要的作用。当物理内存不足以容纳所有需要的页面时，系统必须选择一部分页面“换出去”，以便为新的页面腾出空间。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-一什么是-fifo-页面置换算法&#34;&gt;📌 一、什么是 FIFO 页面置换算法？&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;FIFO（First-In, First-Out）页面置换算法&lt;/strong&gt;是一种遵循“谁先进来谁先出去”的策略：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;最早进入内存的页面，会最先被淘汰。&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;这就像排队买票，先排队的先服务，后来的人必须等队列的前面腾出位置。&lt;/p&gt;
&lt;h3 id=&#34;-特点&#34;&gt;✅ 特点：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;实现简单&lt;/li&gt;
&lt;li&gt;使用&lt;strong&gt;队列（Queue）&lt;/strong&gt; 结构模拟&lt;/li&gt;
&lt;li&gt;不考虑页面是否常用&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-二缺页中断机制简介&#34;&gt;❗ 二、缺页中断机制简介&lt;/h2&gt;
&lt;p&gt;当一个进程访问某个页面时：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果该页面已经在内存中 ✅ → 正常访问&lt;/li&gt;
&lt;li&gt;如果该页面不在内存中 ❌ → 触发 &lt;strong&gt;缺页中断（Page Fault）&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;系统将：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从磁盘中加载页面&lt;/li&gt;
&lt;li&gt;如内存已满，使用页面置换算法（如 FIFO）决定淘汰哪个页面&lt;/li&gt;
&lt;li&gt;更新内存状态，继续执行程序&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;-缺页中断数就是衡量页面置换算法好坏的指标之一&#34;&gt;💡 缺页中断数就是衡量页面置换算法好坏的指标之一。&lt;/h3&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-三fifo-算法示例分析&#34;&gt;🧪 三、FIFO 算法示例分析&lt;/h2&gt;
&lt;p&gt;假设页面访问序列为：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[7, 0, 1, 2, 0, 3, 0, 4]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;内存帧数为 &lt;code&gt;3&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;使用 FIFO 策略处理：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;操作&lt;/th&gt;
          &lt;th&gt;内存状态&lt;/th&gt;
          &lt;th&gt;缺页？&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;7&lt;/td&gt;
          &lt;td&gt;7&lt;/td&gt;
          &lt;td&gt;✅&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;0&lt;/td&gt;
          &lt;td&gt;7 0&lt;/td&gt;
          &lt;td&gt;✅&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;1&lt;/td&gt;
          &lt;td&gt;7 0 1&lt;/td&gt;
          &lt;td&gt;✅&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;2&lt;/td&gt;
          &lt;td&gt;0 1 2&lt;/td&gt;
          &lt;td&gt;✅&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;0&lt;/td&gt;
          &lt;td&gt;0 1 2&lt;/td&gt;
          &lt;td&gt;❌&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;3&lt;/td&gt;
          &lt;td&gt;1 2 3&lt;/td&gt;
          &lt;td&gt;✅&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;0&lt;/td&gt;
          &lt;td&gt;2 3 0&lt;/td&gt;
          &lt;td&gt;✅&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;4&lt;/td&gt;
          &lt;td&gt;3 0 4&lt;/td&gt;
          &lt;td&gt;✅&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;缺页次数 = 6&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Test</title>
      <link>https://vsvnakers.github.io/posts/test/</link>
      <pubDate>Fri, 04 Apr 2025 02:21:54 +0800</pubDate>
      <guid>https://vsvnakers.github.io/posts/test/</guid>
      <description>&lt;p&gt;这是测试文章。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
